# Docker Compose for Local Development
# Complete diabetes prediction MLOps stack

version: '3.8'

services:
  # PostgreSQL for MLflow backend
  postgres:
    image: postgres:15-alpine
    container_name: diabetes-postgres
    environment:
      POSTGRES_DB: mlflow
      POSTGRES_USER: mlflow
      POSTGRES_PASSWORD: mlflow_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mlflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - diabetes-network

  # MinIO for S3-compatible storage (MLflow artifacts)
  minio:
    image: minio/minio:latest
    container_name: diabetes-minio
    environment:
      MINIO_ACCESS_KEY: minioaccess
      MINIO_SECRET_KEY: miniosecret
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - diabetes-network

  # MLflow Server
  mlflow:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.mlflow
    container_name: diabetes-mlflow
    environment:
      BACKEND_STORE_URI: postgresql://mlflow:mlflow_password@postgres:5432/mlflow
      DEFAULT_ARTIFACT_ROOT: s3://mlflow-artifacts/
      AWS_ACCESS_KEY_ID: minioaccess
      AWS_SECRET_ACCESS_KEY: miniosecret
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - diabetes-network

  # Prefect Server
  prefect:
    image: prefecthq/prefect:2.14-python3.11
    container_name: diabetes-prefect
    environment:
      PREFECT_API_URL: http://localhost:4200/api
      PREFECT_SERVER_API_HOST: 0.0.0.0
    ports:
      - "4200:4200"
    command: prefect server start --host 0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4200/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - diabetes-network

  # Diabetes Prediction API
  diabetes-api:
    build:
      context: ../..
      dockerfile: deployment/docker/Dockerfile.api
    container_name: diabetes-api
    environment:
      ENVIRONMENT: development
      MLFLOW_TRACKING_URI: http://mlflow:5000
      PREFECT_API_URL: http://prefect:4200/api
      AWS_ACCESS_KEY_ID: minioaccess
      AWS_SECRET_ACCESS_KEY: miniosecret
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
    ports:
      - "8000:8000"
    volumes:
      - ../../data:/app/data
      - ../../models:/app/models
      - ../../config:/app/config
    depends_on:
      mlflow:
        condition: service_healthy
      prefect:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - diabetes-network

  # Evidently Monitoring Dashboard
  evidently:
    image: evidently/evidently-service:latest
    container_name: diabetes-evidently
    environment:
      EVIDENTLY_SERVICE_PORT: 8085
    ports:
      - "8085:8085"
    volumes:
      - ../../models/monitoring:/app/monitoring
    networks:
      - diabetes-network

  # Grafana for Monitoring Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: diabetes-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - diabetes-network

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: diabetes-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - diabetes-network

  # NGINX Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: diabetes-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - diabetes-api
      - mlflow
      - grafana
      - evidently
    networks:
      - diabetes-network

volumes:
  postgres_data:
  minio_data:
  grafana_data:
  prometheus_data:

networks:
  diabetes-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
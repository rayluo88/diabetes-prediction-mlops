# CI/CD Pipeline for Diabetes Prediction MLOps Project
# Comprehensive workflow for testing, building, and deploying

name: Diabetes Prediction MLOps CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_to_staging:
        description: 'Deploy to staging environment'
        required: false
        default: 'false'
        type: boolean
      deploy_to_production:
        description: 'Deploy to production environment'
        required: false
        default: 'false'
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  AWS_REGION: 'ap-southeast-1'  # Singapore region
  PROJECT_NAME: diabetes-prediction

jobs:
  # Code Quality and Testing
  quality-gate:
    name: Code Quality Gate
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Code formatting check
      run: |
        black --check src/ tests/
        isort --check-only src/ tests/

    - name: Linting
      run: |
        flake8 src/ tests/
        
    - name: Type checking
      run: |
        mypy src/ --ignore-missing-imports --no-strict-optional --allow-untyped-defs --allow-incomplete-defs || echo "Type checking completed with warnings"

    - name: Security scanning
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        safety scan --save-as json safety-report.json --policy-file .safety-policy.json || echo "Security scan completed with vulnerabilities"

    - name: Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: bandit-report.json

  # Tests
  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: quality-gate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Create test directories
      run: |
        mkdir -p data/raw data/processed models/trained models/artifacts

    - name: Run all tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: tests

  # Build and Deploy
  build-and-deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: tests
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create directories
      run: |
        mkdir -p data/raw data/processed models/trained models/artifacts

    - name: Run data pipeline and train model
      env:
        MLFLOW_TRACKING_URI: sqlite:///models/artifacts/mlflow.db
      run: |
        python src/data/load_diabetes_data.py
        python src/data/preprocess.py
        python src/models/train_diabetes_model.py

    - name: Build Docker images
      run: |
        docker build -f deployment/docker/Dockerfile.api -t diabetes-api:${{ github.sha }} .

    - name: Deploy to environment
      if: github.ref == 'refs/heads/main'
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ env.AWS_REGION }}
      run: |
        echo "üöÄ Deploying to production environment"
        # Add actual deployment commands here

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality-gate
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: python

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # Notification
  notify:
    name: Notify Teams
    runs-on: ubuntu-latest
    needs: [build-and-deploy, security-scan]
    if: always()

    steps:
    - name: Notify on Success
      if: needs.build-and-deploy.result == 'success'
      run: |
        echo "‚úÖ Diabetes Prediction MLOps pipeline completed successfully!"

    - name: Notify on Failure
      if: failure()
      run: |
        echo "‚ùå Diabetes Prediction MLOps pipeline failed"
        echo "üîç Check logs for details"